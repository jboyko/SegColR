knitr::opts_chunk$set(echo = TRUE)
load("~/Downloads/OUMV_THETA13_sim.0.1_3_3.rep26.Rsave")
bm1.nome
?OUwie
library(OUwie)
bm.test1 <- OUwie(bm1.nome$phy, sim.dat, model=c("BM1"), root.station=FALSE, algorithm="three.point", quiet=TRUE, check.identify=FALSE)
bm.test1
bm1.nome$loglik
bm1.nome$phy
sim.dat
?OUwie
bm.test1 <- OUwie(bm1.nome$phy, sim.dat, model=c("BM1"), root.station=FALSE, algorithm="invert", quiet=TRUE, check.identify=FALSE)
bm.test1 <- OUwie(bm1.nome$phy, sim.dat, model=c("BM1"), root.station=FALSE, algorithm="three.point", quiet=TRUE, check.identify=FALSE)
bm.test2 <- OUwie(bm1.nome$phy, sim.dat, model=c("BM1"), root.station=FALSE, algorithm="invert", quiet=TRUE, check.identify=FALSE)
bm.test2$loglik
bm.test1$loglik
bm.test1 <- OUwie(bm1.nome$phy, sim.dat, model=c("BM1"), root.station=TRUE, algorithm="three.point", quiet=TRUE, check.identify=FALSE)
bm.test1
bm.test1 <- OUwie(bm1.nome$phy, sim.dat, model=c("BM1"), root.station=FALSE, algorithm="three.point", quiet=TRUE, check.identify=FALSE)
debug(OUwie)
bm1.nome$phy
bm1.nome$phy$node.label
sim.dat
bm.test1 <- OUwie(bm1.nome$phy, sim.dat, model=c("BM1"), root.station=FALSE, algorithm="three.point", quiet=TRUE, check.identify=FALSE)
algorithm
regime
data[, 2]
x
phy
phy$tip.label
tail(data)
tail(x)
Rate.mat
index.mat
index.mat
index.mat
debug(dev)
dev
k.alpha
k.sigma
map
shift.point
tip.states
int.states
tip.states
int.states
tip.states
data[, 1]
factor(data[, 1])
tip.states.cp
factor(data[, 1])
phy$mapped.edge
tot.states
tip.states
bm.test1 <- OUwie(bm1.nome$phy, sim.dat, model=c("BM1"), root.station=FALSE, algorithm="three.point", quiet=TRUE, check.identify=FALSE)
tip.states
factor(rep(1, length(data[, 1])))
debug(dev)
p
index.mat
edges
mserr
trendy
get.root.theta
mserr
edges
W
pars
expected.vals
pars
transformed.tree
TIPS
comp
logl
p
Rate.mat
index.mat
V
Rate.mat[] <- c(p, 1e-10)[index.mat]
N <- length(x[, 1])
Rate.mat[] <- c(p, 1e-10)[index.mat]
N <- length(x[, 1])
Rate.mat
V <- varcov.ou(phy, edges, Rate.mat[1:2,], root.state = root.state,
simmap.tree = simmap.tree, root.age = root.age,
scaleHeight = scaleHeight, assume.station = root.station,
shift.point = shift.point)
Rate.mat
Rate.mat[1:2,]
Rate.mat[-3,]
Rate.mat
root.state
simmap.tree
root.age
scaleHeight
root.station
shift.point
N <- length(x[, 1])
Rate.mat
W
W <- weight.mat(phy, edges, Rate.mat, root.state = root.state,
simmap.tree = simmap.tree, root.age = root.age,
scaleHeight = scaleHeight, assume.station = TRUE,
shift.point = shift.point)
N <- length(x[, 1])
V
Rate.mat
V <- varcov.ou(phy, edges, Rate.mat, root.state = root.state,
simmap.tree = simmap.tree, root.age = root.age,
scaleHeight = scaleHeight, assume.station = root.station,
shift.point = shift.point)
N <- length(x[, 1])
x
N
N <- length(x)
theta <- Inf
try(theta <- pseudoinverse(t(W) %*% pseudoinverse(V) %*%
W) %*% t(W) %*% pseudoinverse(V) %*% x, silent = TRUE)
theta
DET <- sum(log(abs(Re(diag(qr(V)$qr)))))
DET
DET <- determinant(V, logarithm = TRUE)
logl <- -0.5 * (t(x - W %*% theta) %*% pseudoinverse(V) %*%
(x - W %*% theta)) - 0.5 * as.numeric(DET$modulus) -
0.5 * (N * log(2 * pi))
logl
expected.vals
theta0
theta
pars
get.root.theta
transformed.tree
bm.test1 <- OUwie(bm1.nome$phy, sim.dat, model=c("BM1"), root.station=FALSE, algorithm="three.point", quiet=TRUE, check.identify=FALSE, get.root.theta = FALSE)
bm.test2 <- OUwie(bm1.nome$phy, sim.dat, model=c("BM1"), root.station=FALSE, algorithm="invert", quiet=TRUE, check.identify=FALSE)
bm.test1$loglik
bm.test2$loglik
bm.test2 <- OUwie(bm1.nome$phy, sim.dat, model=c("BM1"), root.station=FALSE, algorithm="invert", quiet=TRUE, check.identify=FALSE, get.root.theta = FALSE)
bm.test1$loglik
bm.test2$loglik
bm.test1 <- OUwie(bm1.nome$phy, sim.dat, model=c("BM1"), root.station=FALSE, algorithm="three.point", quiet=TRUE, check.identify=FALSE, get.root.theta = FALSE)
debug(dev)
N <- length(x
)
V <- varcov.ou(phy, edges, Rate.mat, root.state = root.state,
simmap.tree = simmap.tree, root.age = root.age,
scaleHeight = scaleHeight, assume.station = root.station,
shift.point = shift.point)
theta <- Inf
try(theta <- pseudoinverse(t(W) %*% pseudoinverse(V) %*%
W) %*% t(W) %*% pseudoinverse(V) %*% x, silent = TRUE)
DET <- sum(log(abs(Re(diag(qr(V)$qr)))))
DET <- determinant(V, logarithm = TRUE)
logl <- -0.5 * (t(x - W %*% theta) %*% pseudoinverse(V) %*%
(x - W %*% theta)) - 0.5 * as.numeric(DET$modulus) -
0.5 * (N * log(2 * pi))
logl
pars
get.root.theta
colSums(t(W) * pars[, 1])
expected.vals
pars
debug(transformPhy)
nTip
RootAge
NodeAges
D
NodeAge_i
DistRoot_i
Map_i
Dist_rootward
Dist_tipward
Sigma_j
Dist_tipward
Sigma_j
Alpha_j
Dist_tipward <- Dist_rootward + Map_i[j]
Sigma_j
Sigma_j
Alpha_j
tmp.w
tmp.v
v
w
Dist_rootward
v
w
V_Tilde
D
phy$edge.length
DiagWt
exp(-sum(D[tip.paths[[i]]]))
D[tip.paths[[i]]]
sum(D[tip.paths[[i]]])
exp(-sum(D[tip.paths[[i]]]))
TIPS
transformed.tree
logl
-0.5 * (t(x - W %*% theta) %*% pseudoinverse(V) %*%
(x - W %*% theta)) - 0.5 * as.numeric(DET) -
0.5 * (N * log(2 * pi))
