file_name <- basename(img_path)
file_name <- sub("\\.[^.]*$", "", file_name)
directory <- dirname(img_path)
json_path <- paste0(gsub("images", "json/", directory), "segcolr_output_", file_name, ".json")
if(!file.exists(json_path)){
ground_results <- grounded_segmentation_cli(img_path,
labels,
output_json = "/home/jboyko/SegColR/inst/extdata/json/",
output_plot = "/home/jboyko/SegColR/inst/extdata/plot/")
json_path = ground_results$json_path
}
seg_results <- load_segmentation_results(
image_path = img_path,
json_path = json_path
)
plot_seg_results(
seg_results = seg_results,
mask_colors = "Set1",
background = "grayscale",
show_label = TRUE,
show_score = TRUE,
show_bbox = TRUE,
score_threshold = 0.5,
label_size = 1.2,
bbox_thickness = 2,
mask_alpha = 0.3
)
plot_seg_results(
seg_results = seg_results,
mask_colors = "Set1",
background = "grayscale",
show_label = TRUE,
show_score = TRUE,
show_bbox = TRUE,
score_threshold = 0,
label_size = 1.2,
bbox_thickness = 2,
mask_alpha = 0.3
)
color_results <- process_masks_and_extract_colors(
image = seg_results$image,
masks = seg_results$mask,
scores = seg_results$score,
labels = seg_results$label,
include_labels = labels[1],
exclude_labels = labels[2],
score_threshold = 0.5,
n_colors = 5
)
plot_color_info(color_results, TRUE, TRUE)
plot_repainted_mask(color_results, TRUE, TRUE)
plot_repainted_mask(color_results$image, color_results$final_mask, color_results$color_info)
### Example 4
img_path <- example_data$image_paths[4]
labels <- c("a fish.", "the fins of a fish.")
file_name <- basename(img_path)
file_name <- sub("\\.[^.]*$", "", file_name)
directory <- dirname(img_path)
json_path <- paste0(gsub("images", "json/", directory), "segcolr_output_", file_name, ".json")
if(!file.exists(json_path)){
ground_results <- grounded_segmentation_cli(img_path,
labels,
output_json = "/home/jboyko/SegColR/inst/extdata/json/",
output_plot = "/home/jboyko/SegColR/inst/extdata/plot/")
json_path = ground_results$json_path
}
seg_results <- load_segmentation_results(
image_path = img_path,
json_path = json_path
)
plot_seg_results(
seg_results = seg_results,
mask_colors = "Set1",
background = "grayscale",
show_label = TRUE,
show_score = TRUE,
show_bbox = TRUE,
score_threshold = 0,
label_size = 1.2,
bbox_thickness = 2,
mask_alpha = 0.3
)
color_results <- process_masks_and_extract_colors(
image = seg_results$image,
masks = seg_results$mask,
scores = seg_results$score,
labels = seg_results$label,
include_labels = labels,
# exclude_labels = labels[2],
# exclude_boxes = 2,
score_threshold = 0,
n_colors = 5
)
color_results <- process_masks_and_extract_colors(
image = seg_results$image,
masks = seg_results$mask,
scores = seg_results$score,
labels = seg_results$label,
include_labels = labels,
exclude_labels = labels[2],
exclude_boxes = 2,
score_threshold = 0,
n_colors = 5
)
plot_color_info(color_results, FALSE, TRUE)
plot_repainted_mask(
image = color_results$image,
final_mask = color_results$final_mask,
color_info = color_results$color_info)
color_results <- process_masks_and_extract_colors(
image = seg_results$image,
masks = seg_results$mask,
scores = seg_results$score,
labels = seg_results$label,
include_labels = labels,
# exclude_labels = labels[2],
# exclude_boxes = 2,
score_threshold = 0,
n_colors = 5
)
plot_repainted_mask(
image = color_results$image,
final_mask = color_results$final_mask,
color_info = color_results$color_info)
library(SegColR)
library(imager)
list.files(system.file(package = "SegColR"))
# 10 worked examples
example_data <- load_segcolr_example_data()
### Example 4
img_path <- example_data$image_paths[4]
labels <- c("a fish.", "the fins of a fish.")
file_name <- basename(img_path)
file_name <- sub("\\.[^.]*$", "", file_name)
directory <- dirname(img_path)
json_path <- paste0(gsub("images", "json/", directory), "segcolr_output_", file_name, ".json")
if(!file.exists(json_path)){
ground_results <- grounded_segmentation_cli(img_path,
c("a fish.", "the fins of a fish."),
output_json = "/home/jboyko/SegColR/inst/extdata/json/",
output_plot = "/home/jboyko/SegColR/inst/extdata/plot/")
json_path = ground_results$json_path
}
seg_results <- load_segmentation_results(
image_path = img_path,
json_path = json_path
)
plot_seg_results(
seg_results = seg_results,
mask_colors = "Set1",
background = "grayscale",
show_label = TRUE,
show_score = TRUE,
show_bbox = TRUE,
score_threshold = 0,
label_size = 1.2,
bbox_thickness = 2,
mask_alpha = 0.3
)
devtools::build()
knit_with_parameters("~/SegColR/vignettes/segcolr-example-usage.Rmd")
library(SegColR)
?SegColR
??SegColR
library(ffanalytics)
library(dplyr)
?scrape_data
scrape_data
my_scrape <- scrape_data(src = c("CBS", "ESPN", "FantasyPros", "FantasySharks", "FFToday", "FleaFlicker", "NumberFire", "FantasyFootballNerd", "NFL", "RTSports", "Walterfootball"),
pos = c("QB", "RB", "WR", "TE"),
season = 2023, # NULL grabs the current season
week = NULL) # NULL grabs the current week
scoring_rules <- list(
pass = list(
pass_att = 0, pass_comp = 0, pass_inc = 0, pass_yds = 0.04, pass_tds = 6,
pass_int = -2, pass_40_yds = 0,  pass_300_yds = 0, pass_350_yds = 0,
pass_400_yds = 0
),
rush = list(
all_pos = TRUE,
rush_yds = 0.1,  rush_att = 0, rush_40_yds = 0, rush_tds = 6,
rush_100_yds = 0, rush_150_yds = 0, rush_200_yds = 0),
rec = list(
all_pos = TRUE,
rec = 1, rec_yds = 0.1, rec_tds = 6, rec_40_yds = 0, rec_100_yds = 0,
rec_150_yds = 0, rec_200_yds = 0
),
misc = list(
all_pos = TRUE,
fumbles_lost = -2, fumbles_total = 0,
sacks = 0, two_pts = 2
),
kick = list(
xp = 1.0, fg_0019 = 3.0,  fg_2029 = 3.0, fg_3039 = 3.0, fg_4049 = 4.0,
fg_50 = 5.0,  fg_miss = -1
),
ret = list(
all_pos = TRUE,
return_tds = 6, return_yds = 0
),
idp = list(
all_pos = TRUE,
idp_solo = 1, idp_asst = 0.5, idp_sack = 2, idp_int = 3,  idp_fum_force = 3,
idp_fum_rec = 2,  idp_pd = 1, idp_td = 6,  idp_safety = 2
),
dst = list(
dst_fum_rec = 2,  dst_int = 2, dst_safety = 2, dst_sacks = 1, dst_td = 6,
dst_blk = 1.5, dst_ret_yds = 0, dst_pts_allowed = 0
),
pts_bracket = list(
list(threshold = 0, points = 10),
list(threshold = 6, points = 7),
list(threshold = 20, points = 4),
list(threshold = 34, points = 0),
list(threshold = 99, points = -4)
)
)
df <- data.frame(
WR = c(5, 9, 15, 21, 25, 28, 33, 40, 47, 52),
RB = c(5, 11, 15, 19, 22, 27, 31, 34, 39, 42),
QB = c(1, 3, 5, 6, 8, 8, 9, 11, 11, 14),
TE = c(1, 1, 1, 2, 5, 9, 11, 11, 11, 12),
row.names = paste("Round", 1:10)
)
rowSums(df)
colnames(df) <- c("WR", "RB", "QB", "TE")
vor_base <- c(
QB = 8,
RB = 24,
WR = 36,
TE = 9,
K = 8, DST = 3, DL = 10, LB = 10, DB = 10)
my_projections <-  projections_table(my_scrape,
scoring_rules=scoring_rules,
vor_baseline=vor_base,
avg_type='weighted')
my_projections <- my_projections %>%
add_player_info() %>%
add_ecr() %>%
add_adp() %>%
add_aav() %>%
add_uncertainty()
write.csv(my_projections, "/home/jboyko/games/fantasy-football/2024/proj23.csv", row.names = FALSE)
my_scrape <- scrape_data(src = c("CBS", "ESPN", "FantasyPros", "FantasySharks", "FFToday", "FleaFlicker", "NumberFire", "FantasyFootballNerd", "NFL", "RTSports", "Walterfootball"),
pos = c("QB", "RB", "WR", "TE"),
season = 2022, # NULL grabs the current season
week = NULL) # NULL grabs the current week
library(SegColR)
library(imager)
list.files(system.file(package = "SegColR"))
# 10 worked examples
example_data <- load_segcolr_example_data()
### Example 1 - basic description
img_path <- example_data$image_paths[2]
labels <- "a fish."
file_name <- basename(img_path)
file_name <- sub("\\.[^.]*$", "", file_name)
directory <- dirname(img_path)
json_path <- paste0(gsub("images", "json/", directory), "segcolr_output_", file_name, ".json")
json_path
ground_results <- grounded_segmentation_cli(img_path,
labels,
output_json = "/home/jboyko/BioSegment/extdata/json/",
output_plot = "/home/jboyko/BioSegment/extdata/plot/")
seg_results <- load_segmentation_results(
image_path = img_path,
json_path = json_path
)
plot_seg_results(
seg_results = seg_results,
mask_colors = "Set1",
background = "grayscale",
show_label = TRUE,
show_score = TRUE,
show_bbox = TRUE,
score_threshold = 0.5,
label_size = 1.2,
bbox_thickness = 2,
mask_alpha = 0.3
)
color_results_k <- process_masks_and_extract_colors(
image = seg_results$image,
masks = seg_results$mask,
scores = seg_results$score,
labels = seg_results$label,
include_labels = labels,
exclude_labels = NULL,
score_threshold = 0.5,
custom_colors = NULL
)
full_col <- color_results$color_info$dominant_color_info$hex_color
color_results_k <- process_masks_and_extract_colors(
image = seg_results$image,
masks = seg_results$mask,
scores = seg_results$score,
labels = seg_results$label,
include_labels = labels,
exclude_labels = NULL,
score_threshold = 0.5,
custom_colors = NULL
)
color_results <- process_masks_and_extract_colors(
image = seg_results$image,
masks = seg_results$mask,
scores = seg_results$score,
labels = seg_results$label,
include_labels = labels,
exclude_labels = NULL,
score_threshold = 0.5,
custom_colors = NULL
)
full_col <- color_results$color_info$dominant_color_info$hex_color
color_results_c <- process_masks_and_extract_colors(
image = seg_results$image,
masks = seg_results$mask,
scores = seg_results$score,
labels = seg_results$label,
include_labels = labels,
exclude_labels = NULL,
score_threshold = 0.5,
custom_colors = full_col
)
plot_color_info(color_results_k, FALSE, TRUE)
par(mfrow=c(1,2))
plot_repainted_mask(
image = color_results_k$image,
final_mask = color_results_k$final_mask,
color_info = color_results_k$color_info)
plot_repainted_mask(
image = color_results_c$image,
final_mask = color_results_c$final_mask,
color_info = color_results_c$color_info)
dev.off()
full_col
shQuote("poop")
jsonlite::toJSON
jsonlite::toJSON(labels)
example_data$image_paths[2]
### Example XX - basic description
img_path <- "/home/jboyko/Downloads/Screenshot 2024-07-28 at 5.41.35 AM.png"
labels <- c("a bee.", "a ruler.")
file_name <- basename(img_path)
file_name
file_name <- sub("\\.[^.]*$", "", file_name)
file_name
directory <- dirname(img_path)
directory
json_path <- paste0(gsub("images", "json/", directory), "segcolr_output_", file_name, ".json")
json_path
file.exists(json_path)
!file.exists(json_path)
if(!file.exists(json_path)){
ground_results <- grounded_segmentation_cli(img_path,
labels,
output_json = "/home/jboyko/BioSegment/extdata/json/",
output_plot = "/home/jboyko/BioSegment/extdata/plot/")
json_path = ground_results$json_path
}
seg_results <- load_segmentation_results(
image_path = img_path,
json_path = json_path
)
plot_seg_results(
seg_results = seg_results,
mask_colors = "Set1",
background = "grayscale",
show_label = TRUE,
show_score = TRUE,
show_bbox = TRUE,
score_threshold = 0.5,
label_size = 1.2,
bbox_thickness = 2,
mask_alpha = 0.3
)
seg_results
debug(plot_seg_results)
plot_seg_results(
seg_results = seg_results,
mask_colors = "Set1",
background = "grayscale",
show_label = TRUE,
show_score = TRUE,
show_bbox = TRUE,
score_threshold = 0.5,
label_size = 1.2,
bbox_thickness = 2,
mask_alpha = 0.3
)
seg_results$image
dim(seg_results$image)
imager::as.cimg(seg_results$image)
imager::grayscale(imager::as.cimg(seg_results$image))
seg_results$image
imager::as.cimg(seg_results$image
imager::as.cimg(seg_results$image)
imager::as.cimg(seg_results$image)
original = imager::as.cimg(seg_results$image)
original
imager::grayscale(imager::as.cimg(seg_results$image))
original
imager::imfill(dim = dim(imager::as.cimg(seg_results$image))
,
val = 0)
imager::as.cimg(seg_results$image)
plot_seg_results(
seg_results = seg_results,
mask_colors = "Set1",
background = "grayscale",
show_label = TRUE,
show_score = TRUE,
show_bbox = TRUE,
score_threshold = 0.5,
label_size = 1.2,
bbox_thickness = 2,
mask_alpha = 0.3
)
original = imager::as.cimg(seg_results$image)
original
dim(original)
dim(original)[4]
devtool::load_all()
devtoolsa::load_all()
devtools::load_all()
plot_seg_results(
seg_results = seg_results,
mask_colors = "Set1",
background = "grayscale",
show_label = TRUE,
show_score = TRUE,
show_bbox = TRUE,
score_threshold = 0.5,
label_size = 1.2,
bbox_thickness = 2,
mask_alpha = 0.3
)
debug(plot_seg_results)
plot_seg_results(
seg_results = seg_results,
mask_colors = "Set1",
background = "grayscale",
show_label = TRUE,
show_score = TRUE,
show_bbox = TRUE,
score_threshold = 0.5,
label_size = 1.2,
bbox_thickness = 2,
mask_alpha = 0.3
)
original
switch(background,
"original" = ,
"grayscale" = imager::grayscale(original),
"transparent" = imager::imfill(dim = dim(original), val = 0),
imager::imfill(dim = dim(original), val = col2rgb(background) / 255))
original
dim(original)
imager::as.cimg(seg_results$image)[,,,1:3] # make RGB no A
original = imager::as.cimg(seg_results$image)[,,,1:3] # make RGB no A
dim(original)
original = imager::as.cimg(seg_results$image)
imager::grayscale(original)
imager::imfill(dim = dim(original), val = 0)
imager::grayscale(original)
imager::grayscale
?imager::grayscale
cimg.dimensions(original)
library(imager)
cimg.dimensions(original)
depth(original)
flatten.alpha(original)
devtools::load_all()
plot_seg_results(
seg_results = seg_results,
mask_colors = "Set1",
background = "grayscale",
show_label = TRUE,
show_score = TRUE,
show_bbox = TRUE,
score_threshold = 0.5,
label_size = 1.2,
bbox_thickness = 2,
mask_alpha = 0.3
)
plot_seg_results(
seg_results = seg_results,
mask_colors = "Set1",
background = "grayscale",
show_label = TRUE,
show_score = TRUE,
show_bbox = TRUE,
score_threshold = 0.1,
label_size = 1.2,
bbox_thickness = 2,
mask_alpha = 0.3
)
?plot_seg_results(
seg_results = seg_results,
mask_colors = "Set1",
background = "grayscale",
show_label = TRUE,
show_score = TRUE,
show_bbox = TRUE,
score_threshold = 0.1,
label_size = 1.2,
bbox_thickness = 2,
mask_alpha = 0.3
)
library(SegColR)
# 10 worked examples
example_data <- load_segcolr_example_data()
?load_segcolr_example_data
devtools::install()
