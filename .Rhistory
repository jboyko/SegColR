# Regenerate documentation
devtools::document()
# Check NAMESPACE content
cat(readLines("NAMESPACE"), sep = "\n")
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::clean_dll()
devtools::build()
.Last.error
list.files(path = ".", pattern = "00LOCK", all.files = TRUE, full.names = TRUE, recursive = TRUE)
unlink("path/to/00LOCK-directory", recursive = TRUE, force = TRUE)
devtools::build(quiet = FALSE)
devtools::build(quiet = FALSE)
devtools::build(quiet = FALSE)
devtools::build(quiet = FALSE)
devtools::build(quiet = FALSE)
devtools::install()
devtools::document(quiet = FALSE)
devtools::document(quiet = FALSE)
devtools::document(quiet = FALSE)
warnings()
devtools::install()
library(SegColR)
?grounded_segmentation_cli
devtools::document(quiet = FALSE)
devtools::document(quiet = FALSE)
devtools::install()
devtools::load_all()
library(SegColR)
?object_detection_cli
object_detection_cli
object_detection_cli(dir("../floral-vision/images/", full.names = TRUE)[1], "a flower.")
dir("../floral-vision/images/", full.names = TRUE)[1]
system.file("python/detection.py", package = "SegColR")
devtools::load_all()
object_detection_cli(dir("../floral-vision/images/", full.names = TRUE)[1], "a flower.")
devtools::document(quiet = FALSE)
devtools::load_all()
object_detection_cli(dir("../floral-vision/images/", full.names = TRUE)[1], "a flower.")
grounded_segmentation_cli(dir("../floral-vision/images/", full.names = TRUE)[1], "a flower.")
devtools::load_all()
devtools::document()
devtools::document()
devtools:::load_all()
result <- custom_bbox_segmentation_cli(
image_path = "../floral-vision/images/100000462.jpg",
bbox = c(10, 10, 100, 100),  # Example bounding box
polygon_refinement = TRUE
)
print(result$segmentation_results)
result <- grounded_segmentation_cli(
image_path = "../floral-vision/images/100000462.jpg",
bbox = c(10, 10, 100, 100),  # Example bounding box
polygon_refinement = TRUE
)
result <- grounded_segmentation_cli(
image_path = "../floral-vision/images/100000462.jpg",
polygon_refinement = TRUE
)
result <- grounded_segmentation_cli(
image_path = "../floral-vision/images/100000462.jpg",
"a flower."
polygon_refinement = TRUE
result <- grounded_segmentation_cli(
image_path = "../floral-vision/images/100000462.jpg",
"a flower.",
polygon_refinement = TRUE
)
devtools::document()
devtools::install()
devtools::install()
devtools::build()
?grounded_segmentation_cli
library(SegColR)
?grounded_segmentation_cli
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::install()
image_path
img_path
img_path <- dir("../floral-vision/images/", full.names = TRUE)[1]
img_path
devtools::install()
library(SegColR)
image_path
img_path
dirname(> img_path
dirname(img_path)
dirname(img_path)
dirname(img_path)
file_name <- basename(img_path)
directory <- dirname(img_path)
image_path = img_path
file_name <- basename(image_path)
directory <- dirname(image_path)
file_name
directory
directory
directory
devtools::load_all()
img_path <- dir("../floral-vision/images/", full.names = TRUE)[1]
ground_results <- grounded_segmentation_cli(img_path,
c("a flower.", "a bee."),
output_json = "../BioSegment/segcolr_test/json/",
output_plot = "../BioSegment/segcolr_test/plot/")
file_name
sub("\\.[^.]*$", "", file_name)
devtools:::load_all()
img_path <- dir("../floral-vision/images/", full.names = TRUE)[1]
ground_results <- grounded_segmentation_cli(img_path,
c("a flower.", "a bee."),
output_json = "../BioSegment/segcolr_test/json/",
output_plot = "../BioSegment/segcolr_test/plot/")
color_analysis
seg_results
ground_results
seg_results <- load_segmentation_results(
image_path = ground_results$image_path,
json_path = ground_results$json_path,
mask_format = "image"
)
seg_results
color_analysis <- process_masks_and_extract_colors(
image = seg_results$image,
masks = seg_results$mask,
probabilities = seg_results$score,
labels = seg_results$label,
include_labels = c("a flower."),
exclude_labels = c("a bee."),
probability_threshold = 0.3,
n_colors = 5
)
color_analysis
final_mask <- color_analysis
final_mask <- color_analysis$final_mask
# Access results
final_mask <- color_analysis$final_mask
dominant_colors <- color_analysis$color_info$dominant_colors
mean_color <- color_analysis$color_info$mean_color
dominant_colors
mean_color
final_mask
process_masks_and_extract_colors
seg_results$image
dim(seg_results$image)
seg_results$mask
dim(seg_results$mask)
dim(seg_results$mask[[1]])
dim(seg_results$mask[[2]])
ground_results
devtools::load_all()
devtools::load_all()
image_3d
image
image_path = ground_results$image_path
image_path
# Load an image and its corresponding JSON data
image_path <- "../floral-vision/images/100000462.jpg"
json_path <- "../BioSegment/segcolr_test/json/segcolr_output_20240703_112311.json"
# Load image
image <- load_image(image_path)
load_image
devtools::load_all()
# Load image
image <- load_image(image_path)
image
print(dim(image))
# Load image
image <- load_image(image_path)
print(dim(image))
# Load JSON data
json_data <- jsonlite::fromJSON(json_path)
json_path
ground_results$json_path
json_path = ground_results$json_path
# Load JSON data
json_data <- jsonlite::fromJSON(json_path)
print(str(json_data))
# Check dimensions of the first mask
first_mask <- matrix(unlist(json_data$mask[[1]]), nrow=nrow(image), ncol=ncol(image), byrow=TRUE)
print(dim(first_mask))
# Access results
final_mask <- color_analysis$final_mask
dominant_colors <- color_analysis$color_info$dominant_colors
mean_color <- color_analysis$color_info$mean_color
# Load an image and its corresponding JSON data
image_path <- "../floral-vision/images/100000462.jpg"
# Load image
image <- load_image(image_path)
print(dim(image))
# Load JSON data
json_data <- jsonlite::fromJSON(json_path)
print(str(json_data))
# Check dimensions of the first mask
first_mask <- matrix(unlist(json_data$mask[[1]]), nrow=nrow(image), ncol=ncol(image), byrow=TRUE)
print(dim(first_mask))
image
json_data
json_data$mask
json_data$score
json_data$label
devtools::load_all()
result <- process_masks_and_extract_colors(
image = image,
masks = json_data$mask,
probabilities = json_data$score,
labels = json_data$label,
include_labels = c("a flower."),
exclude_labels = c("a bee."),
probability_threshold = 0.3,
n_colors = 5
)
result
devtools::load_all()
result <- process_masks_and_extract_colors(
image = image,
masks = json_data$mask,
probabilities = json_data$score,
labels = json_data$label,
include_labels = c("a flower."),
exclude_labels = c("a bee."),
probability_threshold = 0.3,
n_colors = 5
)
result
masked_pixels
devtools::document()
devtools::load_all()
result <- process_masks_and_extract_colors(
image = image,
masks = json_data$mask,
probabilities = json_data$score,
labels = json_data$label,
include_labels = c("a flower."),
exclude_labels = c("a bee."),
probability_threshold = 0.3,
n_colors = 5
)
debug(extract_colors)
result <- process_masks_and_extract_colors(
image = image,
masks = json_data$mask,
probabilities = json_data$score,
labels = json_data$label,
include_labels = c("a flower."),
exclude_labels = c("a bee."),
probability_threshold = 0.3,
n_colors = 5
)
image
dim(image)
image
devtools::load_all()
result <- process_masks_and_extract_colors(
image = image,
masks = json_data$mask,
probabilities = json_data$score,
labels = json_data$label,
include_labels = c("a flower."),
exclude_labels = c("a bee."),
probability_threshold = 0.3,
n_colors = 5
)
result
debug(extract_colors)
result <- process_masks_and_extract_colors(
image = image,
masks = json_data$mask,
probabilities = json_data$score,
labels = json_data$label,
include_labels = c("a flower."),
exclude_labels = c("a bee."),
probability_threshold = 0.3,
n_colors = 5
)
image
dim(image)
?imager::load.image
plot(image)
image_path
img <- imager::load.image(image_path)
plot(img)
img
img
array(img_)
array(img)
img
str(img)
mask
dim(mask)
extract_colors
mask
mask
image
img
array(image, dim = c(dim(image)[c(1,2,4)]))
image = img
array(image, dim = c(dim(image)[c(1,2,4)]))
mask[,,1]
dim(image)
array(image, dim = c(dim(image)[c(1,2,4)]))
dim(array(image, dim = c(dim(image)[c(1,2,4)])))
dim(mask)
image <- array(image, dim = c(dim(image)[c(1,2,4)]))
rep(mask, dim(image)[3])
image[rep(mask, dim(image)[3])]
matrix(masked_pixels, ncol = dim(image)[3], byrow = TRUE)
hex_colors
hex_colors <- rgb(masked_pixels[,1], masked_pixels[,2], masked_pixels[,3])
hex_colors
image
masked_pixels <- image[rep(mask, dim(image)[3])]
masked_pixels <- matrix(masked_pixels, ncol = dim(image)[3], byrow = TRUE)
# Convert to hex colors
hex_colors <- rgb(masked_pixels[,1], masked_pixels[,2], masked_pixels[,3])
hex_colors
table(hex_colors)
names(sort(color_table, decreasing = TRUE)[1:min(n_colors, length(color_table))])
color_table <- table(hex_colors)
names(sort(color_table, decreasing = TRUE)[1:min(n_colors, length(color_table))])
colMeans(masked_pixels)
apply(masked_pixels, 2, median)
color_table
hex_colors
masked_pixels
hex_colors
devtools::load_all()
result <- process_masks_and_extract_colors(
image = image,
masks = json_data$mask,
probabilities = json_data$score,
labels = json_data$label,
include_labels = c("a flower."),
exclude_labels = c("a bee."),
probability_threshold = 0.3,
n_colors = 5
)
result
json_data$mask
dim(json_data$mask)
json_data$mask
length(json_data$mask)
img_path <- dir("../floral-vision/images/", full.names = TRUE)[90]
ground_results <- grounded_segmentation_cli(img_path,
c("a flower.", "a bee."),
output_json = "../BioSegment/segcolr_test/json/",
output_plot = "../BioSegment/segcolr_test/plot/")
ground_results
seg_results <- load_segmentation_results(
image_path = ground_results$image_path,
json_path = ground_results$json_path,
mask_format = "image"
)
seg_results
seg_results$image
seg_results$mask
image
seg_results$score
seg_results$label
color_analysis <- process_masks_and_extract_colors(
image = seg_results$image,
masks = seg_results$mask,
probabilities = seg_results$score,
labels = seg_results$label,
include_labels = c("a flower."),
exclude_labels = c("a bee."),
probability_threshold = 0.3,
n_colors = 5
)
color_analysis
devtools::install()
devtools::build()
library(SegColR)
img_path <- dir("../floral-vision/images/", full.names = TRUE)[90]
ground_results <- grounded_segmentation_cli(img_path,
c("a flower.", "a bee."),
output_json = "../BioSegment/segcolr_test/json/",
output_plot = "../BioSegment/segcolr_test/plot/")
seg_results <- load_segmentation_results(
image_path = ground_results$image_path,
json_path = ground_results$json_path,
mask_format = "image"
)
seg_results
color_analysis <- process_masks_and_extract_colors(
image = seg_results$image,
masks = seg_results$mask,
probabilities = seg_results$score,
labels = seg_results$label,
include_labels = c("a flower."),
exclude_labels = c("a bee."),
probability_threshold = 0.3,
n_colors = 5
)
color_analysis
?process_masks_and_extract_colors
?load_segmentation_results
?grounded_segmentation_cli
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
SegColR::setup_conda_environment()
# Check if the conda environment exists and is activated
env_name <- "segcolr-env"
condaenv_exists(env_name)
reticulate::condaenv_exists(env_name)
!reticulate::condaenv_exists(env_name) ||
reticulate::conda_python() != reticulate::conda_python(env_name)
!reticulate::condaenv_exists(env_name)
reticulate::conda_python()
reticulate::conda_python(env_name)
devtools::load_all()
devtools::document()
devtools::build()
devtools::check()
library(SegColR)
SegColR::check_environment_status()
reticulate::conda_python()
devtools::document()
dir("../floral-vision/images/", full.names = TRUE)[90]
devtools::load_all()
library(SegColR)
img_path <- dir("../floral-vision/images/", full.names = TRUE)[90]
ground_results <- grounded_segmentation_cli(img_path,
c("a flower.", "a bee."),
output_json = "../BioSegment/segcolr_test/json/",
output_plot = "../BioSegment/segcolr_test/plot/")
devtools::load_all()
library(SegColR)
img_path <- dir("../floral-vision/images/", full.names = TRUE)[90]
ground_results <- grounded_segmentation_cli(img_path,
c("a flower.", "a bee."),
output_json = "../BioSegment/segcolr_test/json/",
output_plot = "../BioSegment/segcolr_test/plot/")
devtools::load_all()
ground_results <- grounded_segmentation_cli(img_path,
c("a flower.", "a bee."),
output_json = "../BioSegment/segcolr_test/json/",
output_plot = "../BioSegment/segcolr_test/plot/")
devtools::build()
devtools::document()
img_path <- dir("../floral-vision/images/", full.names = TRUE)[10]
ground_results <- grounded_segmentation_cli(img_path,
c("a flower.", "a bee."),
output_json = "../BioSegment/segcolr_test/json/",
output_plot = "../BioSegment/segcolr_test/plot/")
devtools::document()
devtools::load_all()
img_path <- dir("../floral-vision/images/", full.names = TRUE)[18]
ground_results <- grounded_segmentation_cli(img_path,
c("a flower.", "a bee."),
output_json = "../BioSegment/segcolr_test/json/",
output_plot = "../BioSegment/segcolr_test/plot/")
devtools::load_all()
ground_results <- grounded_segmentation_cli(img_path,
c("a flower.", "a bee."),
output_json = "../BioSegment/segcolr_test/json/",
output_plot = "../BioSegment/segcolr_test/plot/")
seg_results <- load_segmentation_results(
image_path = ground_results$image_path,
json_path = ground_results$json_path,
mask_format = "image"
)
color_analysis <- process_masks_and_extract_colors(
image = seg_results$image,
masks = seg_results$mask,
probabilities = seg_results$score,
labels = seg_results$label,
include_labels = c("a flower."),
exclude_labels = c("a bee."),
probability_threshold = 0.3,
n_colors = 5
)
color_analysis
devtools::as.package()
devtools::load_all()
img_path <- dir("../floral-vision/images/", full.names = TRUE)[21]
ground_results <- grounded_segmentation_cli(img_path,
c("a flower.", "a bee."),
output_json = "../BioSegment/segcolr_test/json/",
output_plot = "../BioSegment/segcolr_test/plot/")
devtools::document()
devtools::load_all()
devtools::load_all()
library(SegColR)
img_path <- dir("../floral-vision/images/", full.names = TRUE)[21]
ground_results <- grounded_segmentation_cli(img_path,
c("a flower.", "a bee."),
output_json = "../BioSegment/segcolr_test/json/",
output_plot = "../BioSegment/segcolr_test/plot/")
devtools::load_all()
devtools::document()
img_path <- dir("../floral-vision/images/", full.names = TRUE)[25]
ground_results <- grounded_segmentation_cli(img_path,
c("a flower.", "a bee."),
output_json = "../BioSegment/segcolr_test/json/",
output_plot = "../BioSegment/segcolr_test/plot/")
devtools::load_all()
devtools::document()
img_path <- dir("../floral-vision/images/", full.names = TRUE)[33]
ground_results <- grounded_segmentation_cli(img_path,
c("a flower.", "a bee."),
output_json = "../BioSegment/segcolr_test/json/",
output_plot = "../BioSegment/segcolr_test/plot/")
