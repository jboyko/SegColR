# Load all functions in R/
load_all()
library(devtools)
load_all()
library(reticulate)
ls("package:reticulate")
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
getwd()
reticulate::py_last_error()
check()
load_all()
load_all()
load_all()
load_all()
load_all(quiet = FALSE)
?load_all(quiet = FALSE)
load_all()
load_all()
load_all()
pkgname
load_all()
load_all()
load_all()
load_all()
load_all()
reticulate::py_last_error()
load_all()
load_all()
load_all("./", TRUE)
reticulate::py_last_error()
reticulate::py_last_error()
load_all("./", TRUE)
load_all("./", TRUE)
reticulate::use_condaenv("segcolr-env", required = TRUE)
reticulate::py_config()
reticulate::conda_install(envname = "segcolr-env", packages = "transformers")
reticulate::py_run_string("import transformers")
load_all("./", TRUE)
q()  # Quit R session
devtools::load_all()
grounded_segmentation_r
grounded_segmentation_r("http://images.cocodataset.org/val2017/000000039769.jpg", "cat")
ls("package:SegColR")
grounded_segmentation
grounded_segmentation()
load_all("./", TRUE)
devtools::load_all("./", TRUE)
devtools::load_all("./", TRUE)
reticulate
?reticulate
devtools::load_all("./", TRUE)
ls("package:SegColR")
devtools::load_all("./", TRUE)
devtools::load_all("./", TRUE)
ls("package:SegColR")
devtools:::load_all()
devtools:::load_all()
grounded_segmentation_r
grounded_segmentation
devtools:::load_all()
add(1, 2)
devtools:::load_all()
devtools:::load_all()
reticulate::py_run_string("print(dir())")
reticulate::py_run_string("print(dir())")
devtools:::load_all()
grounded_sam <- import("grounded_sam")
grounded_sam <- import("grounded_segmentation")
reticulate::py_last_error()grounded_sam <- import("grounded_sam")
devtools:::load_all()
grounded_sam <- import("grounded_sam")
devtools:::load_all()
grounded_sam <- import("grounded_sam")
devtools::load_all()
library(reticulate)
grounded_sam <- import("grounded_sam")
reticulate::py_run_string("print(dir())")
?py_run_string
reticulate::py_run_string("print(dir())", TRUE)
grounded_sam <- reticulate::import_from_path("grounded_sam", path = system.file("python", package = "SegColR"))
grounded_segmentation_r
grounded_segmentation_r("http://images.cocodataset.org/val2017/000000039769.jpg", "a cat.")
reticulate::source_python(system.file("python/utils.py", package = pkgname))
# Import Python modules
reticulate::source_python(system.file("python/utils.py", package = pkgname))
# Import Python modules
reticulate::source_python(system.file("python/utils.py"))
# Import Python modules
reticulate::source_python(system.file("inst/python/utils.py"))
?source_python
pkgname
reticulate::py_run_string("print(dir())")
grounded_sam <- reticulate::import_from_path("grounded_sam", path = system.file("python", package = "SegColR"))
grounded_sam <- reticulate::import("grounded_sam")
?source_python
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
grounded_segmentation
reticulate::py_run_string("print(dir())")
result <- grounded_segmentation(image, labels, threshold, polygon_refinement, detector_id, segmenter_id)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
grounded_segmentation
test_python_functions <- function() {
tryCatch({
# Check if we can access the Python modules
reticulate::py_run_string("import utils, detection, segmentation, grounded_sam, plot")
# Try to run a simple operation from one of your modules
# Replace this with a simple function from one of your modules
reticulate::py_run_string("result = utils.some_simple_function()")
message("Python functions are loaded and working.")
return(TRUE)
}, error = function(e) {
message("Error: ", e$message)
message("Python functions are not working correctly.")
return(FALSE)
})
}
test_python_functions()
test_python_functions <- function() {
tryCatch({
# Print Python's sys.path
reticulate::py_run_string("import sys; print('Python sys.path:', sys.path)")
# Print current working directory
reticulate::py_run_string("import os; print('Current working directory:', os.getcwd())")
# Try to import modules
reticulate::py_run_string("import utils, detection, segmentation, grounded_sam, plot")
# Try to run a simple operation from one of your modules
reticulate::py_run_string("result = utils.some_simple_function()")
message("Python functions are loaded and working.")
return(TRUE)
}, error = function(e) {
message("Error: ", e$message)
message("Python functions are not working correctly.")
return(FALSE)
})
}
test_python_functions()
> test_python_functions()
python
system.file("python", package = "SegColR")
devtools::load_all()
test_python_functions()
devtools::load_all()
test_python_functions()
test_python_functions <- function() {
tryCatch({
# Print Python's sys.path
reticulate::py_run_string("import sys; print('Python sys.path:', sys.path)")
# Print current working directory
reticulate::py_run_string("import os; print('Current working directory:', os.getcwd())")
# Print contents of the python directory
python_path <- system.file("python", package = "SegColR")
message("Contents of ", python_path, ":")
print(list.files(python_path))
# Try to import modules
reticulate::py_run_string("from utils import DetectionResult, BoundingBox, some_simple_function")
reticulate::py_run_string("import detection, segmentation, grounded_sam, plot")
# Try to create a DetectionResult object
reticulate::py_run_string("
result = DetectionResult(
score=0.9,
label='test',
box=BoundingBox(xmin=0, ymin=0, xmax=100, ymax=100)
)
print('Created DetectionResult:', result)
")
# Try to run a simple operation from utils
reticulate::py_run_string("print(some_simple_function())")
message("Python functions are loaded and working.")
return(TRUE)
}, error = function(e) {
message("Error: ", e$message)
message("Python functions are not working correctly.")
return(FALSE)
})
}
test_python_functions()
test_python_functions <- function() {
tryCatch({
# Print Python's sys.path
reticulate::py_run_string("import sys; print('Python sys.path:', sys.path)")
# Print current working directory
reticulate::py_run_string("import os; print('Current working directory:', os.getcwd())")
# Print contents of the python directory
python_path <- system.file("python", package = "SegColR")
message("Contents of ", python_path, ":")
print(list.files(python_path))
# Try to import modules
reticulate::py_run_string("from utils import DetectionResult, BoundingBox")
reticulate::py_run_string("import detection, segmentation, grounded_sam, plot")
# Try to create a DetectionResult object
reticulate::py_run_string("
result = DetectionResult(
score=0.9,
label='test',
box=BoundingBox(xmin=0, ymin=0, xmax=100, ymax=100)
)
print('Created DetectionResult:', result)
")
# Try to run a simple operation from utils
reticulate::py_run_string("print(some_simple_function())")
message("Python functions are loaded and working.")
return(TRUE)
}, error = function(e) {
message("Error: ", e$message)
message("Python functions are not working correctly.")
return(FALSE)
})
}
test_python_functions()
python_path
devtools::load_all()
test_python_functions()
test_python_functions <- function() {
tryCatch({
# Print Python's sys.path
reticulate::py_run_string("import sys; print('Python sys.path:', sys.path)")
# Print current working directory
reticulate::py_run_string("import os; print('Current working directory:', os.getcwd())")
# Print contents of the python directory
python_path <- system.file("python", package = "SegColR")
message("Contents of ", python_path, ":")
print(list.files(python_path))
# Try to import modules
# reticulate::py_run_string("from utils import DetectionResult, BoundingBox")
reticulate::py_run_string("import utils detection, segmentation, grounded_sam, plot")
# Try to create a DetectionResult object
reticulate::py_run_string("
result = DetectionResult(
score=0.9,
label='test',
box=BoundingBox(xmin=0, ymin=0, xmax=100, ymax=100)
)
print('Created DetectionResult:', result)
")
# Try to run a simple operation from utils
reticulate::py_run_string("print(some_simple_function())")
message("Python functions are loaded and working.")
return(TRUE)
}, error = function(e) {
message("Error: ", e$message)
message("Python functions are not working correctly.")
return(FALSE)
})
}
test_python_functions()
reticulate::py_last_error()
source("~/SegColR/R/grounded_sam.R")
reticulate::py_last_error()
test_python_functions()
source("~/SegColR/R/grounded_sam.R")
source("~/SegColR/R/grounded_sam.R")
test_python_functions()
reticulate::py_run_string("import detection, segmentation, grounded_sam, plot")
reticulate::py_run_string("from utils import DetectionResult, BoundingBox")
reticulate::py_run_string("import detection, segmentation, grounded_sam, plot")
reticulate::py_run_string("
result = DetectionResult(
score=0.9,
label='test',
box=BoundingBox(xmin=0, ymin=0, xmax=100, ymax=100)
)
print('Created DetectionResult:', result)
")
# Try to import modules
reticulate::py_run_string("from utils import DetectionResult, BoundingBox")
reticulate::py_run_string("
result = DetectionResult(
score=0.9,
label='test',
box=BoundingBox(xmin=0, ymin=0, xmax=100, ymax=100)
)
print('Created DetectionResult:', result)
")
reticulate::py_run_string("result = DetectionResult(
score=0.9,
label='test',
box=BoundingBox(xmin=0, ymin=0, xmax=100, ymax=100)
)
print('Created DetectionResult:', result)
")
source("~/SegColR/R/grounded_sam.R")
source("~/SegColR/R/grounded_sam.R")
reticulate::py_run_string("
result = DetectionResult(
score=0.9,
label='test',
box=BoundingBox(xmin=0, ymin=0, xmax=100, ymax=100)
)
print('Created DetectionResult:', result)
")
reticulate::py_run_string("result = DetectionResult(score=0.9,label='test', box=BoundingBox(xmin=0, ymin=0, xmax=100, ymax=100))
print('Created DetectionResult:', result)")
reticulate::py_run_string("result = DetectionResult(score=0.9,label='test', box=BoundingBox(xmin=0, ymin=0, xmax=100, ymax=100))")
reticulate::py_run_string(print("result"))
reticulate::py_run_string("print(result)")
reticulate::py_run_string("import detection, segmentation, grounded_sam, plot")
source("~/SegColR/R/grounded_sam.R")
600/2
utils <- reticulate::import("utils")
detection <- reticulate::import("detection")
segmentation <- reticulate::import("segmentation")
# Import necessary modules
utils <- reticulate::import("utils")
reticulate::py_run_string("from detection import DetectionResult")
# Import necessary modules
utils <- reticulate::import("utils")
reticulate::py_run_string("from detection import DetectionResult")
# Import necessary modules
utils <- reticulate::import("utils")
# Correct import statement for DetectionResult
reticulate::py_run_string("from detection_module import DetectionResult")
# Import necessary modules
utils <- reticulate::import("utils")
# Correct import statement for DetectionResult
reticulate::py_run_string("from utils import DetectionResult")
# Import other modules
detection <- reticulate::import("detection")
segmentation <- reticulate::import("segmentation")
devtools::load_all()
detection <- reticulate::import("main")
detection$grounded_segmentation
source("~/SegColR/R/grounded_sam.R")
source("~/SegColR/R/grounded_sam.R")
source("~/SegColR/R/grounded_sam.R")
grounded_segmentation_r("http://images.cocodataset.org/val2017/000000039769.jpg", "a cat.")
source("~/SegColR/R/grounded_sam.R")
reticulate::conda_install(envname = "segcolr-env", packages = "git+https://github.com/huggingface/transformers")
devtools::load_all()
grounded_sam <- reticulate::import("main")
result <- grounded_sam$grounded_segmentation(image, labels, threshold, polygon_refinement, detector_id, segmenter_id)
grounded_sam$grounded_segmentation
source("~/SegColR/R/grounded_sam.R")
grounded_sam$grounded_segmentation("http://images.cocodataset.org/val2017/000000039769.jpg", "a cat.")
source("~/SegColR/R/grounded_sam.R")
reticulate::conda_install(envname = "segcolr-env", packages = "git+https://github.com/huggingface/transformers")
devtools::load_all()
source("~/SegColR/R/grounded_sam.R")
devtools::load_all()
grounded_sam <- reticulate::import("main")
result <- grounded_sam$grounded_segmentation(image, labels, threshold, polygon_refinement, detector_id, segmenter_id)
grounded_sam$grounded_segmentation
grounded_sam$grounded_segmentation("http://images.cocodataset.org/val2017/000000039769.jpg", "a cat.")
grounded_sam$grounded_segmentation
devtools::load_all()
reticulate::py_uninstall("transformers")
reticulate::conda_uninstall("transformers")
?reticulate::conda_remove("transformers")
grounded_sam$grounded_segmentation("http://images.cocodataset.org/val2017/000000039769.jpg", "a cat.")
grounded_sam$grounded_segmentation("http://images.cocodataset.org/val2017/000000039769.jpg", "a cat.")
reticulate::py_last_error()
reticulate::conda_install(packages = "transformers==4.12.0", envname = "segcolr-env")
reticulate::conda_install(envname = "segcolr-env", packages = "transformers", channels = c("conda-forge"))
reticulate::py_install(packages = "git+https://github.com/huggingface/transformers.git", envname = "segcolr-env")
reticulate::use_condaenv("segcolr-env", required = TRUE)
reticulate::py_install(packages = "git+https://github.com/huggingface/transformers.git", method = "pip")
reticulate::py_install(packages = "git+https://github.com/huggingface/transformers.git")
reticulate::use_condaenv("segcolr-env", required = TRUE)
reticulate::py_install("git+https://github.com/huggingface/transformers.git")
reticulate::py_run_string("import subprocess; subprocess.run(['pip', 'install', 'git+https://github.com/huggingface/transformers.git'])")
grounded_sam$grounded_segmentation("http://images.cocodataset.org/val2017/000000039769.jpg", "a cat.")
source("~/SegColR/R/grounded_sam.R")
devtools::load_all()
grounded_sam <- reticulate::import("main")
grounded_sam$grounded_segmentation
grounded_sam$grounded_segmentation("http://images.cocodataset.org/val2017/000000039769.jpg", "a cat.")
grounded_sam$grounded_segmentation(image, labels, threshold, polygon_refinement, detector_id, segmenter_id)
grounded_sam <- reticulate::import("main")
grounded_sam$grounded_segmentation("http://images.cocodataset.org/val2017/000000039769.jpg", "a cat.")
devtools::load_all()
tmp <- grounded_sam$grounded_segmentation("http://images.cocodataset.org/val2017/000000039769.jpg", "a cat.")
devtools::load_all()
tmp <- grounded_sam$grounded_segmentation("http://images.cocodataset.org/val2017/000000039769.jpg", "a cat.")
grounded_sam <- reticulate::import("main")
tmp <- grounded_sam$grounded_segmentation("http://images.cocodataset.org/val2017/000000039769.jpg", "a cat.")
grounded_sam$grounded_segmentation
devtools::load_all()
grounded_sam <- reticulate::import("main")
grounded_sam
grounded_sam$grounded_segmentation
tmp <- grounded_sam$grounded_segmentation("../../../floral-vision/images/21838.jpg", "a flower. a bee.")
getwd()
tmp <- grounded_sam$grounded_segmentation("../floral-vision/images/21838.jpg", "a flower. a bee.")
grounded_sam$grounded_segmentation
devtools::load_all()
grounded_sam <- reticulate::import("main")
grounded_sam
grounded_sam$grounded_segmentation
result <- grounded_sam$grounded_segmentation(image, labels, threshold, polygon_refinement, detector_id, segmenter_id)
tmp <- grounded_sam$grounded_segmentation("../floral-vision/images/21838.jpg", "a flower. a bee.")
py_config()
py_config
py_config()
message("Running the grounded segmentation will be much slower than if you exectuted this code in Python. This is because R, especially when running through RStudio, does not handle multithreading as efficiently as Python does natively.")
message("Note: Running the grounded segmentation will be much slower than if you exectuted this code in Python. \nThis is because R, especially when running through RStudio, does not handle multithreading as efficiently as Python does natively.")
message("Note: Running the grounded segmentation will be much slower than if you exectuted this code in Python. \nThis is because we are running Python through reticulate and R might not properly manage subprocesses needed for parallel execution.")
message("Note: This may take a while to run in R... \nThis is because we are running Python through reticulate and R might not properly manage subprocesses needed for parallel execution.")
message("Note: This may take a while to run in R... \nThis is because we are running Python through reticulate and R might not properly manage subprocesses needed for parallel execution (see vignette for details on how to run this in python).")
library(parallel)
set_python_threads <- function(num_threads) {
py_run_string(sprintf("
import os
import torch
os.environ['OMP_NUM_THREADS'] = '%d'
os.environ['OPENBLAS_NUM_THREADS'] = '%d'
os.environ['MKL_NUM_THREADS'] = '%d'
os.environ['VECLIB_MAXIMUM_THREADS'] = '%d'
os.environ['NUMEXPR_NUM_THREADS'] = '%d'
if torch.cuda.is_available():
torch.set_num_threads(%d)
", num_threads, num_threads, num_threads, num_threads, num_threads, num_threads))
}
devtools::load_all()
detectCores()
num_threads
num_threads = 10
set_python_threads(num_threads)
library(reticulate)
set_python_threads <- function(num_threads) {
reticulate::py_run_string(sprintf("
import os
import torch
os.environ['OMP_NUM_THREADS'] = '%d'
os.environ['OPENBLAS_NUM_THREADS'] = '%d'
os.environ['MKL_NUM_THREADS'] = '%d'
os.environ['VECLIB_MAXIMUM_THREADS'] = '%d'
os.environ['NUMEXPR_NUM_THREADS'] = '%d'
if torch.cuda.is_available():
torch.set_num_threads(%d)
", num_threads, num_threads, num_threads, num_threads, num_threads, num_threads))
}
set_python_threads(num_threads)
grounded_sam <- reticulate::import("main")
tmp <- grounded_sam$grounded_segmentation("../floral-vision/images/21838.jpg", "a flower. a bee.")
set_python_threads
num_threads
grounded_sam$grounded_segmentation
devtools::load_all()
grounded_sam <- reticulate::import("main")
tmp <- grounded_sam$grounded_segmentation("../floral-vision/images/21838.jpg", "a flower. a bee.")
num_threads
num_threads = 15
set_python_threads(num_threads)
grounded_sam <- reticulate::import("main")
tmp <- grounded_sam$grounded_segmentation("../floral-vision/images/21838.jpg", "a flower. a bee.")
set_python_threads(1)
grounded_sam <- reticulate::import("main")
tmp <- grounded_sam$grounded_segmentation("../floral-vision/images/21838.jpg", "a flower. a bee.")
devtools::load_all()
devtools::load_all()
python_script_path
system.file("python/main.py", package = "SegColR")
python_script_path = system.file("python/main.py", package = "SegColR")
python_script_path
# Ensure the Python environment is set up correctly
reticulate::use_condaenv("segcolr-env", required = TRUE)
# Run the Python file
reticulate::py_run_file(python_script_path)
reticulate::py$main
image = "../floral-vision/images/21838.jpg"
labels = "a flower. a bee."
threshold = 0.3
polygon_refinement = FALSE
segmenter_id = NULL
detector_id = NULL
python_script_path
# image = "../floral-vision/images/21838.jpg"
# labels = "a flower. a bee."
# Call the main function from the Python script
result <- reticulate::py$main(
image_path = image,
labels = labels,
threshold = threshold,
polygon_refinement = polygon_refinement,
detector_id = detector_id,
segmenter_id = segmenter_id
)
devtools::load_all()
devtools::load_all()
# tmp <- grounded_sam$grounded_segmentation("../floral-vision/images/21838.jpg", "a flower. a bee.")
grounded_segmentation_cli(
image = "../floral-vision/images/21838.jpg",
labels = c("a flower.", "a bee."),
threshold = 0.3,
polygon_refinement = TRUE,
save_plot = "output.png",
save_json = "results.json"
)
devtools::load_all()
reticulate::conda_remove("segcolr-env")
# tmp <- grounded_sam$grounded_segmentation("../floral-vision/images/21838.jpg", "a flower. a bee.")
grounded_segmentation_cli(
image = "../floral-vision/images/21838.jpg",
labels = c("a flower.", "a bee."),
threshold = 0.3,
polygon_refinement = TRUE,
save_plot = "output.png",
save_json = "results.json"
)
devtools::load_all()
