Q[index_mat > 0] <- p[index_mat[index_mat > 0]]
diag(Q) <- -rowSums(Q)
# pre calculate all necessary matrix expm
p_mat_by_edge <- vapply(tree$edge.length, function(x) expm(Q * x, method = "Ward77"), FUN.VALUE = matrix(0, nrow(Q), ncol(Q)))
# get postorder partial likelihoods
liks_postorder <- compute_postorder_likelihoods(tree = tree,
liks = liks,
p_mat_by_edge = p_mat_by_edge)
# the first preorder partial likelihood is the root prior
root_index <- min(tree$edge[,1])
if(is.null(root.p)){
log_root.p <- liks_postorder[root_index,]
root.p <- exp(log_root.p - max(log_root.p))/
sum(exp(log_root.p - max(log_root.p)))
liks[root_index, ] <- root.p
}else{
liks[root_index, ] <- root.p
}
# gradient calculation, still not working
if(grad){
liks_preorder <- compute_preorder_likelihoods(tree = tree,
liks = liks,
liks_postorder = liks_postorder,
p_mat_by_edge = p_mat_by_edge)
# the liklihood is...
objective <- log_sum(log(root.p) + liks_postorder[root_index,])
# the gradient is...
# 11, 12, 21, 22
D_vrc <- compute_likelihood_gradient(tree = tree,
Q = Q,
liks_postorder = liks_postorder,
liks_preorder = liks_preorder)
D_vrc <- D_vrc[,,-root_index]
D_rc <- c(apply(D_vrc, c(1,2), log_sum)) - objective[1]
M <- t(sapply(1:max(index_mat), function(x) getM_k(x, Q, index_mat)))
gradient <- c(M %*% D_rc)
out <- list(objective = -objective,
gradient = gradient)
}else{
# objective <- log(t(root.p) %*% liks_postorder[root_index,])
objective <- log_sum(log(root.p) + liks_postorder[root_index,])
out <- -objective
cat("\r lnLik:", objective, "....")
}
return(out)
}
grad_aprox <- calculateNegLogLiklihood(
p = log(p),
tree = tree,
liks = liks[,,1],
index_mat = index_mat,
root.p = NULL,
grad = TRUE)
num_grad <- calculateNumericalGradient(
parameters = log(p),
tree = tree,
liks = liks[,,1],
index_mat = index_mat,
root.p = NULL)
grad_aprox$gradient
num_grad
tmp_dat
# corHMM:::getConditionalNodeLik(tree, dat, matrix(c(-1,1,1,-1), 2, 2), 1, c(0.5, 0.5))
print(setNames(c(sum(cor_liks), (-negLnlik)), c("OG corHMM", "new LnLik")))
library(corHMM)
data(primates)
phy <- multi2di(primates[[1]])
data <- primates[[2]]
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 1)
MK_3state
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 2, model="ER")
MK_3state
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 2, model="ER", get.tip.states = TRUE)
MK_3state
MK_3state <- NULL
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 2, model="ER", get.tip.states = TRUE)
MK_3state
debug(ancRECON)
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 2, model="ER", get.tip.states = TRUE)
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 2, model="ER", get.tip.states = TRUE)
tip.fog
debug(GetTipStateBruteForce)
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 2, model="ER", get.tip.states = TRUE)
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 2, model="ER", get.tip.states = TRUE)
is.null(tip.fog)
tip.fog
tip.fog == 0
(!is.null(tip.fog) | tip.fog == 0)
(!is.null(tip.fog) | tip.fog == 0)
!is.null(tip.fog)
!is.null(tip.fog) | tip.fog == 0
!is.null(tip.fog) | tip.fog == 0
tip.fog
library(corHMM)
data(primates)
phy <- multi2di(primates[[1]])
data <- primates[[2]]
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 2, model="ER", get.tip.states = TRUE)
MK_3state
MK_3state$tip.states
MK_3state$states
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 2, model="ER", get.tip.states = FALSE)
MK_3state$tip.states
setwd("mvh/")
devtools::load_all()
devtools::install()
# devtools::install_github("FantasyFootballAnalytics/ffanalytics")
setwd("~/")
library(ffanalytics)
library(dplyr)
my_scrape <- scrape_data(src = c("CBS", "ESPN", "FantasyPros", "FantasySharks", "FFToday", "NumberFire", "FantasyFootballNerd", "NFL", "Walterfootball"),
pos = c("QB", "RB", "WR", "TE"),
season = NULL, # NULL grabs the current season
week = NULL) # NULL grabs the current week
saveRDS(my_scrape, file = "games/fantasy-football/2024/scrape.RDS")
my_scrape <- readRDS("games/fantasy-football/2024/scrape.RDS")
scoring_rules <- list(
pass = list(
pass_att = 0, pass_comp = 0, pass_inc = 0, pass_yds = 0.04, pass_tds = 6,
pass_int = -2, pass_40_yds = 0,  pass_300_yds = 0, pass_350_yds = 0,
pass_400_yds = 0
),
rush = list(
all_pos = TRUE,
rush_yds = 0.1,  rush_att = 0, rush_40_yds = 0, rush_tds = 6,
rush_100_yds = 0, rush_150_yds = 0, rush_200_yds = 0),
rec = list(
all_pos = FALSE,
"RB" = list(rec = 1, rec_yds = 0.1, rec_tds = 6, rec_40_yds = 0, rec_100_yds = 0, rec_150_yds = 0, rec_200_yds = 0),
"WR" = list(rec = 1, rec_yds = 0.1, rec_tds = 6, rec_40_yds = 0, rec_100_yds = 0, rec_150_yds = 0, rec_200_yds = 0),
"TE" = list(rec = 1, rec_yds = 0.1, rec_tds = 6, rec_40_yds = 0, rec_100_yds = 0, rec_150_yds = 0, rec_200_yds = 0)
),
misc = list(
all_pos = TRUE,
fumbles_lost = -2, fumbles_total = 0,
sacks = 0, two_pts = 2
),
kick = list(
xp = 1.0, fg_0019 = 3.0,  fg_2029 = 3.0, fg_3039 = 3.0, fg_4049 = 4.0,
fg_50 = 5.0,  fg_miss = -1
),
ret = list(
all_pos = TRUE,
return_tds = 6, return_yds = 0
),
idp = list(
all_pos = TRUE,
idp_solo = 1, idp_asst = 0.5, idp_sack = 2, idp_int = 3,  idp_fum_force = 3,
idp_fum_rec = 2,  idp_pd = 1, idp_td = 6,  idp_safety = 2
),
dst = list(
dst_fum_rec = 2,  dst_int = 2, dst_safety = 2, dst_sacks = 1, dst_td = 6,
dst_blk = 1.5, dst_ret_yds = 0, dst_pts_allowed = 0
),
pts_bracket = list(
list(threshold = 0, points = 10),
list(threshold = 6, points = 7),
list(threshold = 20, points = 4),
list(threshold = 34, points = 0),
list(threshold = 99, points = -4)
)
)
df <- data.frame(
WR = c(5, 9, 15, 21, 25, 28, 33, 40, 47, 52),
RB = c(5, 11, 15, 19, 22, 27, 31, 34, 39, 42),
QB = c(1, 3, 5, 6, 8, 8, 9, 11, 11, 14),
TE = c(1, 1, 1, 2, 5, 9, 11, 11, 11, 12),
row.names = paste("Round", 1:10)
)
rowSums(df)
colnames(df) <- c("WR", "RB", "QB", "TE")
# ecr diff
vor_base <- c(
QB = 12,
RB = 30,
WR = 38,
TE = 9,
K = 8, DST = 3, DL = 10, LB = 10, DB = 10)
my_stats <-  projections_table(my_scrape,
scoring_rules=scoring_rules,
vor_baseline=vor_base,
avg_type='average',
return_raw_stats = TRUE)
my_stats <- my_stats %>%
add_player_info()
write.csv(my_stats, "games/fantasy-football/2024/stats.csv")
my_projections <-  projections_table(my_scrape,
scoring_rules=scoring_rules,
vor_baseline=vor_base,
avg_type='average',
return_raw_stats = FALSE)
my_projections <- my_projections %>%
add_player_info() %>%
add_ecr() %>%
add_adp() %>%
add_uncertainty()
my_projections$ecr_diff <- my_projections$rank - my_projections$overall_ecr
my_projections$full_name <- paste0(my_projections$first_name, " " , my_projections$last_name)
boris <- read.csv("games/fantasy-football/2024/boris.csv")
add_boris <- function(my_projections, boris){
boris$Player.Name <- sapply(boris$Player.Name,
function(x) gsub(" Jr.", "", x))
boris$Player.Name <- sapply(boris$Player.Name,
function(x) gsub("s II", "s", x))
boris$Player.Name[boris$Player.Name == "Marvin Harrison"] <-
"Marvin Harrison Jr."
boris$Player.Name[boris$Player.Name == "DJ Moore"] <-
"D.J. Moore"
boris$Player.Name[boris$Player.Name == "Deebo Samuel Sr."] <-
"Deebo Samuel"
boris$Player.Name[boris$Player.Name == "Hollywood Brown"] <-
"Marquise Brown"
boris$Player.Name[boris$Player.Name == "Brian Thomas"] <-
"Brian Thomas Jr."
boris$Player.Name[boris$Player.Name == "Joshua Palmer"] <-
"Josh Palmer"
boris$Player.Name[boris$Player.Name == "DeMario Douglas"] <-
"Demario Douglas"
boris$Player.Name[boris$Player.Name == "Gabe Davis"] <-
"Gabriel Davis"
boris$Player.Name[!boris$Player.Name %in% my_projections$full_name]
boris <- boris[boris$Player.Name %in% my_projections$full_name,]
my_projections$boris_tier <- NA
my_projections$boris_rank <- NA
my_projections$boris_sd <- NA
my_projections$boris_best <- NA
my_projections$boris_worst <- NA
my_projections[match(boris$Player.Name, my_projections$full_name),
grep("boris", colnames(my_projections))] <- boris[,c(3,1,8,5,6)]
my_projections$boris_diff <- my_projections$rank - my_projections$boris_rank
return(my_projections)
}
my_projections <- add_boris(my_projections, boris)
read.csv("games/fantasy-football/2024/espn.csv")
espn <- read.csv("games/fantasy-football/2024/espn.csv")
espn$Name %in% my_projections$full_name
espn$Name[!espn$Name %in% my_projections$full_name]
espn$Player.Name[espn$Player.Name == "Marvin Harrison"] <-
"Marvin Harrison Jr."
espn$Name[espn$Name == "Marvin Harrison"] <-
"Marvin Harrison Jr."
espn$Name[espn$Name == "DJ Moore"] <-
"D.J. Moore"
espn$Name[espn$Name == "Hollywood Brown"] <-
"Marquise Brown"
espn$Name[espn$Name == "Brian Thomas"] <-
"Brian Thomas Jr."
espn$Name[espn$Name == "Joshua Palmer"] <-
"Josh Palmer"
espn$Name[espn$Name == "DeMario Douglas"] <-
"Demario Douglas"
espn$Name[espn$Name == "Gabe Davis"] <-
"Gabriel Davis"
espn$Name[espn$Name == "DJ Chark"] <-
"D.J. Chark"
espn$Name[!espn$Name %in% my_projections$full_name]
espn$Name[espn$Name == "Kenneth Walker"] <-
"Kenneth Walker III"
espn$Name[!espn$Name %in% my_projections$full_name]
espn$Name[!espn$Name %in% my_projections$full_name]
espn$Name %in% my_projections$full_name
espn
head(espn)
match(espn$Name, my_projections$full_name)
my_projections$espn_rank <- NA
my_projections[match(espn$Name, my_projections$full_name),
grep("espn", colnames(my_projections))] <- espn$ESPN
my_projections$espn_diff <- my_projections$rank - my_projections$espn_rank
my_projections$espn_diff
# devtools::install_github("FantasyFootballAnalytics/ffanalytics")
setwd("~/")
library(ffanalytics)
library(dplyr)
my_scrape <- scrape_data(src = c("CBS", "ESPN", "FantasyPros", "FantasySharks", "FFToday", "NumberFire", "FantasyFootballNerd", "NFL", "Walterfootball"),
pos = c("QB", "RB", "WR", "TE"),
season = NULL, # NULL grabs the current season
week = NULL) # NULL grabs the current week
my_scrape <- readRDS("games/fantasy-football/2024/scrape.RDS")
scoring_rules <- list(
pass = list(
pass_att = 0, pass_comp = 0, pass_inc = 0, pass_yds = 0.04, pass_tds = 6,
pass_int = -2, pass_40_yds = 0,  pass_300_yds = 0, pass_350_yds = 0,
pass_400_yds = 0
),
rush = list(
all_pos = TRUE,
rush_yds = 0.1,  rush_att = 0, rush_40_yds = 0, rush_tds = 6,
rush_100_yds = 0, rush_150_yds = 0, rush_200_yds = 0),
rec = list(
all_pos = FALSE,
"RB" = list(rec = 1, rec_yds = 0.1, rec_tds = 6, rec_40_yds = 0, rec_100_yds = 0, rec_150_yds = 0, rec_200_yds = 0),
"WR" = list(rec = 1, rec_yds = 0.1, rec_tds = 6, rec_40_yds = 0, rec_100_yds = 0, rec_150_yds = 0, rec_200_yds = 0),
"TE" = list(rec = 1, rec_yds = 0.1, rec_tds = 6, rec_40_yds = 0, rec_100_yds = 0, rec_150_yds = 0, rec_200_yds = 0)
),
misc = list(
all_pos = TRUE,
fumbles_lost = -2, fumbles_total = 0,
sacks = 0, two_pts = 2
),
kick = list(
xp = 1.0, fg_0019 = 3.0,  fg_2029 = 3.0, fg_3039 = 3.0, fg_4049 = 4.0,
fg_50 = 5.0,  fg_miss = -1
),
ret = list(
all_pos = TRUE,
return_tds = 6, return_yds = 0
),
idp = list(
all_pos = TRUE,
idp_solo = 1, idp_asst = 0.5, idp_sack = 2, idp_int = 3,  idp_fum_force = 3,
idp_fum_rec = 2,  idp_pd = 1, idp_td = 6,  idp_safety = 2
),
dst = list(
dst_fum_rec = 2,  dst_int = 2, dst_safety = 2, dst_sacks = 1, dst_td = 6,
dst_blk = 1.5, dst_ret_yds = 0, dst_pts_allowed = 0
),
pts_bracket = list(
list(threshold = 0, points = 10),
list(threshold = 6, points = 7),
list(threshold = 20, points = 4),
list(threshold = 34, points = 0),
list(threshold = 99, points = -4)
)
)
df <- data.frame(
WR = c(5, 9, 15, 21, 25, 28, 33, 40, 47, 52),
RB = c(5, 11, 15, 19, 22, 27, 31, 34, 39, 42),
QB = c(1, 3, 5, 6, 8, 8, 9, 11, 11, 14),
TE = c(1, 1, 1, 2, 5, 9, 11, 11, 11, 12),
row.names = paste("Round", 1:10)
)
rowSums(df)
colnames(df) <- c("WR", "RB", "QB", "TE")
# ecr diff
vor_base <- c(
QB = 12,
RB = 30,
WR = 38,
TE = 9,
K = 8, DST = 3, DL = 10, LB = 10, DB = 10)
my_stats <-  projections_table(my_scrape,
scoring_rules=scoring_rules,
vor_baseline=vor_base,
avg_type='average',
return_raw_stats = TRUE)
my_stats <- my_stats %>%
add_player_info()
write.csv(my_stats, "games/fantasy-football/2024/stats.csv")
my_projections <-  projections_table(my_scrape,
scoring_rules=scoring_rules,
vor_baseline=vor_base,
avg_type='average',
return_raw_stats = FALSE)
my_projections <- my_projections %>%
add_player_info() %>%
add_ecr() %>%
add_adp() %>%
add_uncertainty()
my_projections$ecr_diff <- my_projections$rank - my_projections$overall_ecr
my_projections$full_name <- paste0(my_projections$first_name, " " , my_projections$last_name)
boris <- read.csv("games/fantasy-football/2024/boris.csv")
add_boris <- function(my_projections, boris){
boris$Player.Name <- sapply(boris$Player.Name,
function(x) gsub(" Jr.", "", x))
boris$Player.Name <- sapply(boris$Player.Name,
function(x) gsub("s II", "s", x))
boris$Player.Name[boris$Player.Name == "Marvin Harrison"] <-
"Marvin Harrison Jr."
boris$Player.Name[boris$Player.Name == "DJ Moore"] <-
"D.J. Moore"
boris$Player.Name[boris$Player.Name == "Deebo Samuel Sr."] <-
"Deebo Samuel"
boris$Player.Name[boris$Player.Name == "Hollywood Brown"] <-
"Marquise Brown"
boris$Player.Name[boris$Player.Name == "Brian Thomas"] <-
"Brian Thomas Jr."
boris$Player.Name[boris$Player.Name == "Joshua Palmer"] <-
"Josh Palmer"
boris$Player.Name[boris$Player.Name == "DeMario Douglas"] <-
"Demario Douglas"
boris$Player.Name[boris$Player.Name == "Gabe Davis"] <-
"Gabriel Davis"
boris <- boris[boris$Player.Name %in% my_projections$full_name,]
my_projections$boris_tier <- NA
my_projections$boris_rank <- NA
my_projections$boris_sd <- NA
my_projections$boris_best <- NA
my_projections$boris_worst <- NA
my_projections[match(boris$Player.Name, my_projections$full_name),
grep("boris", colnames(my_projections))] <- boris[,c(3,1,8,5,6)]
my_projections$boris_diff <- my_projections$rank - my_projections$boris_rank
return(my_projections)
}
espn <- read.csv("games/fantasy-football/2024/espn.csv")
add_espn <- function(my_projections, espn){
espn$Name[espn$Name == "Marvin Harrison"] <-
"Marvin Harrison Jr."
espn$Name[espn$Name == "DJ Moore"] <-
"D.J. Moore"
espn$Name[espn$Name == "Hollywood Brown"] <-
"Marquise Brown"
espn$Name[espn$Name == "Brian Thomas"] <-
"Brian Thomas Jr."
espn$Name[espn$Name == "Joshua Palmer"] <-
"Josh Palmer"
espn$Name[espn$Name == "DeMario Douglas"] <-
"Demario Douglas"
espn$Name[espn$Name == "Gabe Davis"] <-
"Gabriel Davis"
espn$Name[espn$Name == "DJ Chark"] <-
"D.J. Chark"
espn$Name[espn$Name == "Kenneth Walker"] <-
"Kenneth Walker III"
espn <- espn[espn$Name %in% my_projections$full_name,]
my_projections$espn_rank <- NA
my_projections[match(espn$Name, my_projections$full_name),
grep("espn", colnames(my_projections))] <- espn$ESPN
my_projections$espn_diff <- my_projections$rank - my_projections$espn_rank
return(my_projections)
}
my_projections <- add_boris(my_projections, boris)
my_projections <- add_espn(my_projections, espn)
# my_projections <- my_projections[my_projections$avg_type == "weighted",]
my_projections <- cbind(
my_projections[, c("full_name", "team", "pos", "age", "exp")],
draft = "",
my_projections[, c("rank", "boris_rank", "boris_diff","espn_rank", "espn_diff", "overall_ecr", "ecr_diff", "adp",  "adp_diff", "points",  "points_vor", "dropoff", "uncertainty", "boris_sd", "boris_best", "boris_worst")],
my_projections)
write.csv(my_projections, "/home/jboyko/games/fantasy-football/2024/proj.csv", row.names = FALSE)
setwd("../jboyko/SegColR/")
devtools::build()
devtools::check()
getwd()
setwd("../mvh/")
devtools::load_all()
metadata <- search_specimen_metadata(sample_species)
sample_species <- "Myrcia nivea"
metadata <- search_specimen_metadata(sample_species)
plot_specimens_by_institution(metadata)
plot_specimens_by_institution
devtools::load_all()
plot_specimens_by_institution(metadata)
devtools::load_all()
plot_specimens_by_institution(metadata)
par("usr")[3]
par("usr")
par("usr")[3]
devtools::load_all()
plot_specimens_by_institution(metadata)
devtools::load_all()
plot_specimens_by_institution(metadata)
sorted_counts
sort(table(metadata$institutionCode), decreasing = TRUE)
devtools::load_all()
plot_specimens_by_institution(metadata)
plot_specimens_by_country(metadata)
par("usr")[3]
par("usr")
par("usr")[4]
devtools::load_all()
plot_specimens_by_country(metadata)
devtools::load_all()
plot_specimens_by_country(metadata)
devtools::load_all()
plot_specimens_by_country(metadata)
plot_specimens_by_institution(metadata)
devtools::load_all()
plot_specimens_by_institution(metadata)
devtools::load_all()
plot_specimens_by_country(metadata)
devtools::load_all()
plot_specimens_by_country(metadata)
devtools::load_all()
plot_specimens_by_country(metadata)
devtools::load_all()
plot_specimens_by_country(metadata)
devtools::load_all()
plot_specimens_by_country(metadata)
devtools::load_all()
plot_specimens_by_country(metadata)
devtools::load_all()
plot_specimens_by_country(metadata)
devtools::load_all()
plot_specimens_by_country(metadata)
devtools::load_all()
plot_specimens_by_country(metadata)
devtools::load_all()
plot_specimens_by_country(metadata)
devtools::load_all()
plot_specimens_by_country(metadata)
devtools::load_all()
plot_specimens_by_country(metadata)
devtools::load_all()
devtools::load_all()
plot_specimens_by_country(metadata)
getwd()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
setwd("../SegColR/")
devtools::build()
devtools::build()
devtools::build()
install.packages("mvh")
install.packages("mvh")
install.packages("mvh")
install.packages("SegColR")
